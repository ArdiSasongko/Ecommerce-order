// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertOrder = `-- name: InsertOrder :one
INSERT INTO orders (user_id, total_price, status) values ($1, $2, $3) RETURNING id
`

type InsertOrderParams struct {
	UserID     int32
	TotalPrice pgtype.Numeric
	Status     OrderStatus
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertOrder, arg.UserID, arg.TotalPrice, arg.Status)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertOrderOrderItem = `-- name: InsertOrderOrderItem :exec
UPDATE orders SET orders_items = $1 WHERE id = $2
`

type InsertOrderOrderItemParams struct {
	OrdersItems []int32
	ID          int32
}

func (q *Queries) InsertOrderOrderItem(ctx context.Context, arg InsertOrderOrderItemParams) error {
	_, err := q.db.Exec(ctx, insertOrderOrderItem, arg.OrdersItems, arg.ID)
	return err
}

const updateStatus = `-- name: UpdateStatus :exec
UPDATE orders SET status = $1 WHERE id = $2
`

type UpdateStatusParams struct {
	Status OrderStatus
	ID     int32
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) error {
	_, err := q.db.Exec(ctx, updateStatus, arg.Status, arg.ID)
	return err
}
